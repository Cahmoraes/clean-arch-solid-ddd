generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  email               String     @unique
  password_hash       String
  created_at          DateTime   @default(now())
  role                Role       @default(MEMBER)
  updated_at          DateTime   @updatedAt
  status              UserStatus @default(activated)
  billing_customer_id String?    @unique

  checkIns     CheckIn[]
  subscription Subscription[]

  @@map("users")
}

model CheckIn {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime  @default(now())
  validated_at DateTime?
  latitude     Decimal
  longitude    Decimal
  user_id      String    @db.Uuid
  gym_id       String    @db.Uuid
  updated_at   DateTime  @updatedAt
  gym          Gym       @relation(fields: [gym_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])

  @@map("check_ins")
}

model Gym {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cnpj        String    @unique
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  checkIns    CheckIn[]

  @@map("gyms")
}

model Subscription {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String             @db.Uuid
  billing_subscription_id String             @unique
  status                  SubscriptionStatus @default(incomplete)
  canceled_at             DateTime?
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Restrict)

  @@map("subscriptions")
}

enum Role {
  ADMIN
  MEMBER
}

enum UserStatus {
  activated
  suspended
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}
